/*Generated by DSL Forge*/

grammar Statemachine;

options {
  language=JavaScript;
  output=AST;
  ASTLabelType=CommonTree;
}

@lexer::header {
}

@parser::header {
}




rule_Statemachine :
     
	('events' 
		events_0+=rule_Event+ 
	'end')?
	('resetEvents' 
		resetevents_1+=ID+ 
	'end')?
	('commands' 
		commands_2+=rule_Command+ 
	'end')?
	states_3+=rule_State*
 EOF!;



rule_Event:
	name_0=ID code_1=ID
;



rule_Command:
	name_0=ID code_1=ID
;



rule_State:
	'state' name_0=ID
		('actions' '{' actions_1+=ID+ '}')?
		transitions_2+=rule_Transition*
	'end'
;



rule_Transition:
	event_0=ID '=>' state_1=ID
;

ID : ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* ;

STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

COMMENT : ('/*' .* '*/' | '//' ~('\r' | '\n')*)   { $channel = HIDDEN; } ;

WS:  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;} ;

INT: ('0'..'9')+;

